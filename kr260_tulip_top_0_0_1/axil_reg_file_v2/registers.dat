# RW = read/write
# RO = read only

#name of the register set, used for H file header guard:
(KR260_TULIP_REGISTERS)

[REG_FILE_DATA_WIDTH 32]
#4096 bytes is a good address space due to the typical linux page size (4096 bytes):
[REG_FILE_ADDR_WIDTH 12]

#name type address reset_val

CONTROL RW 0x000 0x00000000 {
  DSP_ENABLE [4:4]
  PS_2_I2S_ENABLE [3:3]
  I2S_2_PS_ENABLE [2:2]
  I2S_ENABLE [1:1]
  SW_RESETN [0:0]
}

VERSION RO 0x004 0x00000039 {
  VERSION [31:0]
}

I2C_CONTROL RW 0x008 0x00000000 {
  I2C_IS_READ [23:23]
  DEVICE_ADDRESS [22:16]
  REGISTER_ADDRESS [15:9]
  REGISTER_WR_DATA [8:0]
}

I2C_STATUS RO 0x00C 0x00000000 {
  DIN_READY [13:13]
  DOUT_VALID [12:12]
  ACK_2 [11:11]
  ACK_1 [10:10]
  ACK_0 [9:9]
  REGISTER_RD_DATA [8:0]
}

I2S_STATUS RO 0x010 0x00000000 {
  ADC_ERROR [0:0]
  DAC_ERROR [1:1]
}

I2S_FIFO RO 0x014 0x00000000 {
  FIFO_USED [15:0]
}

I2S_2_PS_FIFO_COUNT RO 0x018 0x00000000 {
  FIFO_USED [15:0]
}

I2S_2_PS_FIFO_READ_L RO 0x01C 0x00000000 {
  FIFO_VALUE_L [31:0]
}

I2S_2_PS_FIFO_READ_R RO 0x020 0x00000000 {
  FIFO_VALUE_R [31:0]
}

PS_2_I2S_FIFO_COUNT RO 0x024 0x00000000 {
  FIFO_AVAILABLE [15:0]
}

PS_2_I2S_FIFO_WRITE_L RW 0x028 0x00000000 {
  FIFO_VALUE_L [31:0]
}

PS_2_I2S_FIFO_WRITE_R RW 0x02C 0x00000000 {
  FIFO_VALUE_R [31:0]
}

TULIP_DSP_CONTROL RW 0x030 0x00000000 {
  SW_RESETN_CHORUS [10:10]
  BYPASS_CHORUS [11:11]
  SW_RESETN_VIBRATO [8:8]
  BYPASS_VIBRATO [9:9]
  SW_RESETN_USR_FIR [7:7]
  BYPASS_USR_FIR [4:4]
  SW_RESETN_LUT_TF [6:6]
  BYPASS_LUT_TF [3:3]
  SW_RESETN_REVERB [5:5]
  BYPASS_REVERB [2:2]
  SYMMETRIC_MODE [1:1]
  BYPASS [0:0]
}

TULIP_DSP_STATUS RO 0x034 0x00000000 {
  CHORUS_LFO_FREQ_PROG_DONE [21:21]
  CHORUS_LFO_FREQ_PROG_READY [20:20]
  CHORUS_LFO_DEPTH_PROG_DONE [19:19]
  CHORUS_LFO_DEPTH_PROG_READY [18:18]
  CHORUS_AVG_DELAY_PROG_DONE [17:17]
  CHORUS_AVG_DELAY_PROG_READY [16:16]
  CHORUS_GAIN_PROG_DONE [15:15]
  CHORUS_GAIN_PROG_READY [14:14]
  VIBRATO_FREQ_OFFSET_PROG_DONE [13:13]
  VIBRATO_FREQ_OFFSET_PROG_READY [12:12]
  VIBRATO_FREQ_DERIV_PROG_DONE [11:11]
  VIBRATO_FREQ_DERIV_PROG_READY [10:10]
  VIBRATO_CHIRP_DEPTH_PROG_DONE [9:9]
  VIBRATO_CHIRP_DEPTH_PROG_READY [8:8]
  VIBRATO_GAIN_PROG_DONE [7:7]
  VIBRATO_GAIN_PROG_READY [6:6]
  REVERB_PROG_DONE [5:5]
  REVERB_PROG_READY [4:4]
  LUT_PROG_DONE [3:3]
  LUT_PROG_READY [2:2]
  FIR_TAP_DONE [1:1]
  FIR_TAP_READY [0:0]
}

TULIP_DSP_USR_FIR_PROG RW 0x038 0x00000000 {
  FIR_TAP_VALUE [15:0]
}

TULIP_DSP_LUT_PROG RW 0x03C 0x00000000 {
  LUT_PROG_VAL [23:0]
}

TULIP_DSP_INPUT_GAIN RW 0x040 0x00010000 {
  INTEGER_BITS [31:16]
  DECIMAL_BITS [15:0]
}

TULIP_DSP_OUTPUT_GAIN RW 0x044 0x00010000 {
  INTEGER_BITS [31:16]
  DECIMAL_BITS [15:0]
}

TULIP_DSP_REVERB_PROG RW 0x048 0x00000000 {
  REVERB_TAP_VALUE [15:0]
}

TULIP_DSP_REVERB_SCALE RW 0x04C 0x00000000 {
  FEEDBACK_RIGHT_SHIFT [23:16]
  FEEDBACK_GAIN [15:0]
}

TULIP_DSP_REVERB_FEEDFORWARD_GAIN RW 0x050 0x00000000 {
  FEEDFORWARD_GAIN [15:0]
}

TULIP_DSP_VIBRATO_GAIN RW 0x054 0x00000000 {
  GAIN [23:0]
}

TULIP_DSP_VIBRATO_CHIRP_DEPTH RW 0x058 0x00000000 {
  CHIRP_DEPTH [31:0]
}

TULIP_DSP_VIBRATO_FREQ_DERIV RW 0x05C 0x00000000 {
  FREQ_DERIV [31:0]
}

TULIP_DSP_VIBRATO_FREQ_OFFSET RW 0x060 0x00000000 {
  FREQ_OFFSET [31:0]
}

TULIP_DSP_CHORUS_GAIN RW 0x064 0x00000000 {
  GAIN [23:0]
}

TULIP_DSP_CHORUS_AVG_DELAY RW 0x068 0x00000000 {
  AVG_DELAY [11:0]
}

TULIP_DSP_CHORUS_LFO_DEPTH RW 0x06C 0x00000000 {
  LFO_DEPTH [11:0]
}

TULIP_DSP_CHORUS_LFO_FREQ RW 0x070 0x00000000 {
  LFO_FREQ [31:0]
}
